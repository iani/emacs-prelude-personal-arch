# 15 Dec 2020 09:07
About org-latex-compile-with-template 

* Purpose: Simplify the customization of Latex export from Org mode

The function =org-latex-compile-with-template= implements an alternative way to turn an org-mode buffer or subtree into latex and compile it into pdf.  It is part of a collection of functions, which provide utilities for customizing the header and footer parts of the latex file, in order to produce output in different styles and with different options. 
* Pdflatex vs. xelatex
=org-latex-compile-with-template= provides choices for compiling with =pdflatex= and =xelatex=.  =XeLaTex= is more suitable for compiling buffers that use custom fonts (not part of the Tex, but installed on your current computer), and for texts written in multiple languages (especially non-latin-character-set languages), using UTF-8. The present packages provides provides keybindings for choosing whether to use =pdflatex= or =xelatex=.

* hydra keyboard menu interface
These functions can be called from a menu provided by a =hydra=.  The hydra (=hydra-latex/body=) is bound to the keyboard shortcut =Control-Meta-Shift-l=. The key bindings are: 

** "x" org-xelatex-compile-buffer "ORG xelatex buffer

Compile entire buffer using xelatex.  Xelatex 

** "X" org-xelatex-compile-subtree "ORG xelatex subtree
** "l" pdflatex-compile-buffer "TEX pdflatex buffer
** "L" xelatex-compile-buffer "TEX xelatex buffer
** "p" org-pdflatex-compile-buffer "ORG pdflatex buffer
** "P" org-pdflatex-compile-subtree "ORG pdflatex subtree
** "t" org-latex-set-buffer-template-interactively "set buffer template
** "T" org-latex-set-subtree-template-interactively "set subtree template
** "/" org-latex-post-file-template-path "post file template path
** "?" org-latex-post-subtree-template-path "post subtree template path
** "f" org-latex-find-file-template-file "find file template file
** "F" org-latex-find-subtree-template-file "find subtree template file
** "K" kill-latex-process-buffer "kill latex process buffer" :exit 
** "q" quit "exit hydra"

* How it Works

The main function for compiling, =org-latex-compile-with-template=  provides an alternative way to exports the selected buffer or subtree as latex, which gets the header and footer for the latex file from a template file written in =LaTeX= instead of the org-mode options.  Using a template file instead of a writing the org-mode options in emacs-lisp makes it easier to edit and try out headers which contain many options.

** Implementation

***  Step 1: Convert org-mode to latex
   
 This is done by the following function call:

  #+begin_src elisp
  (org-export-as
  ;; backend subtreep visible-only body-only ext-plist
     'latex   subtreep   nil       t         nil)
  #+end_src

  The arguments provided to =org-export-as= have the following function:

  - ='latex= signals to output as latex
  - If =subtreep= is non-nil (=t=), then export only the current subtree.  Else if it is nil, then export the entire buffer.
  - =visible-only= is set to =nil=, and signals to export the entire contents of the subtree or buffer.  (Parts hidden by the user are also exported).
  - body-only set to =t=: Export only the org-mode text contents. Do not include header or footer option settings.
  - ext-plist set to =nil=: No other customization properties are provided.

*** Step 2: save latex to file

*** Step 3: get framework file

*** Step 4: Compile framework + exported body

*** Step 5: Copy framework as backup

*** Step 6: Save link to framework backup in org-mode buffer


